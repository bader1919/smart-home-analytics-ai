version: '3.8'

services:
  # Ollama - Local AI Engine
  ollama:
    image: ollama/ollama:latest
    container_name: ollama
    ports:
      - "11434:11434"
    volumes:
      - ollama_data:/root/.ollama
      - ./models:/models
    environment:
      - OLLAMA_HOST=0.0.0.0
    restart: unless-stopped

  # Ollama Model Initializer
  ollama-init:
    image: ollama/ollama:latest
    container_name: ollama-init
    depends_on:
      - ollama
    volumes:
      - ./scripts:/scripts
    command: >
      bash -c "
        sleep 10 &&
        ollama pull llama3.2:3b &&
        ollama pull nomic-embed-text &&
        echo 'Models downloaded successfully'
      "
    environment:
      - OLLAMA_HOST=ollama:11434
    restart: "no"

  # Neo4j Database (Required by Graphiti)
  neo4j:
    image: neo4j:5.15-community
    container_name: neo4j
    environment:
      NEO4J_AUTH: neo4j/smarthome123
      NEO4J_PLUGINS: '["apoc"]'
      NEO4J_dbms_security_procedures_unrestricted: apoc.*
      NEO4J_dbms_memory_heap_initial_size: 1G
      NEO4J_dbms_memory_heap_max_size: 2G
    ports:
      - "7474:7474"  # Neo4j Browser
      - "7687:7687"  # Bolt protocol
    volumes:
      - neo4j_data:/data
      - neo4j_logs:/logs
    restart: unless-stopped

  # Kafka & Zookeeper for HA event streaming
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    restart: unless-stopped

  kafka:
    image: confluentinc/cp-kafka:latest
    container_name: kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: true
    volumes:
      - kafka_data:/var/lib/kafka/data
    restart: unless-stopped

  # Kafka UI for monitoring
  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    depends_on:
      - kafka
    ports:
      - "8080:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9092
    restart: unless-stopped

  # Graphiti Analytics Engine with Ollama
  graphiti-engine:
    build:
      context: .
      dockerfile: Dockerfile.graphiti
    container_name: graphiti-engine
    depends_on:
      - neo4j
      - kafka
      - ollama
      - ollama-init
    environment:
      NEO4J_URI: bolt://neo4j:7687
      NEO4J_USERNAME: neo4j
      NEO4J_PASSWORD: smarthome123
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      OLLAMA_BASE_URL: http://ollama:11434
      OLLAMA_MODEL: llama3.2:3b
      OLLAMA_EMBED_MODEL: nomic-embed-text
    volumes:
      - ./scripts:/app/scripts
      - ./logs:/app/logs
    restart: unless-stopped

  # TimescaleDB for time-series storage
  timescaledb:
    image: timescale/timescaledb:latest-pg15
    container_name: timescaledb
    environment:
      POSTGRES_DB: smart_home_analytics
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: smarthome123
    ports:
      - "5432:5432"
    volumes:
      - timescale_data:/var/lib/postgresql/data
    restart: unless-stopped

  # Analytics Dashboard (Grafana)
  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    depends_on:
      - timescaledb
    ports:
      - "3000:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: smarthome123
    volumes:
      - grafana_data:/var/lib/grafana
      - ./config/grafana:/etc/grafana/provisioning
    restart: unless-stopped

  # Optional: Ollama Web UI for testing
  ollama-webui:
    image: ghcr.io/open-webui/open-webui:main
    container_name: ollama-webui
    depends_on:
      - ollama
    ports:
      - "8081:8080"
    environment:
      OLLAMA_BASE_URL: http://ollama:11434
    volumes:
      - ollama_webui_data:/app/backend/data
    restart: unless-stopped

volumes:
  neo4j_data:
  neo4j_logs:
  kafka_data:
  timescale_data:
  grafana_data:
  ollama_data:
  ollama_webui_data:
